name: Benchmark Workflow

on:
  push:
    paths:
      - 'Projects/**'
      - 'Tools/**'
      - '.github/**'
  workflow_dispatch:

jobs:
  benchmark:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [high-count, low-count, b-tree-query-differences, selectivity-change, hash-query-differences, join-type]

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
      TIME: 18
      THREADS: 4
      EVENTS: 0
      REPORT_INTERVAL: 2
      GCS_BUCKET: "your-gcs-bucket-name"  # Replace with your GCS bucket name

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Authenticate to GCP using a service account
      - name: Authenticate to Google Cloud Storage
        run: |
          echo "${{ secrets.GCS_SA_KEY }}" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project your-project-id  # Replace with your GCP project ID
          gsutil ls || exit 1

      # Map patterns for matrix values
      - name: Set directory patterns
        id: set_patterns
        run: |
          declare -A patterns=( 
            ["high-count"]="./Projects/Index/B_Tree/Scripts/count_row_changes/with_index ./Projects/Index/B_Tree/Scripts/count_row_changes/without_index"
            ["low-count"]="./Projects/Index/B_Tree/Scripts/count_row_changes/with_index ./Projects/Index/B_Tree/Scripts/count_row_changes/without_index"
            ["b-tree-query-differences"]="./Projects/Index/B_Tree/Scripts/query_differences"
            ["selectivity-change"]="./Projects/Index/Hash/Scripts/selectivity_changes"
            ["hash-query-differences"]="./Projects/Index/Hash/Scripts/query_differences"
            ["join-type"]="./Projects/Join_Typ/Scripts/int_queries ./Projects/Join_Typ/Scripts/varchar_queries"
          )
          
          # Convert patterns to a string based on matrix.test-type
          PATTERN=${patterns[${{ matrix.test-type }}]}
          echo "patterns=${PATTERN}" >> $GITHUB_ENV

      # Calculate hash for the directories specified by the patterns
      - name: Calculate hash of directories
        id: calculate_hash
        run: |
          # Generate hash from file contents
          HASH=$(find $patterns -type f -print0 | sort -z | xargs -0 sha256sum | sha256sum | awk '{print $1}')
          echo "Calculated hash: $HASH"
          echo "hash=$HASH" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sysbench
          python -m pip install --upgrade pip
          pip install pandas matplotlib

      - name: Start MySQL container
        run: |
          docker run --name mysql-${{ matrix.test-type }} -d \
            -e MYSQL_ROOT_PASSWORD=$DB_PASS \
            -e MYSQL_DATABASE=$DB_NAME \
            -p $DB_PORT:3306 mysql:8.0
          
          echo "Waiting for MySQL..."
          until docker exec mysql-${{ matrix.test-type }} mysqladmin --user=root --password=$DB_PASS --host=127.0.0.1 --port=$DB_PORT ping --silent; do sleep 1; done
          echo "MySQL is ready!"

      - name: Run sysbench script
        run: |
          chmod +x Tools/sysbench_script.sh
          Tools/sysbench_script.sh -out "./Output/${{ matrix.test-type }}" -len "10,100,500"

      # Stop MySQL container if changes were detected
      - name: Stop MySQL container
        run: |
          docker stop mysql-${{ matrix.test-type }}
          docker rm mysql-${{ matrix.test-type }}

      # Save the output to GCS
      - name: Save output to GCS
        if: env.should_run == 'true'
        run: |
          gsutil -m cp -r ./Output/${{ matrix.test-type }} gs://${GCS_BUCKET}/output-${{ matrix.test-type }}-${{ env.hash }}

      # Upload all output artifacts to GCS
      - name: Upload combined output
        uses: actions/upload-artifact@v3
        with:
          name: combined-output
          path: ./Output/