name: Benchmark Workflow

on:
  push:
    paths:
      - 'Projects/**'
      - '.github/workflows/**'
      - '.github/pattern.json'
      - 'Tools/Python/**'
      - 'Tools/sysbench_script.sh'
  workflow_dispatch:

jobs:
  benchmark:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [high-count, low-count, b-tree-query-differences, selectivity-change, hash-query-differences, join-type, null-check, int-char, data-size]

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
      TIME: 8
      THREADS: 1
      EVENTS: 0
      REPORT_INTERVAL: 1
      GENERAL_PATHS: "./.github/workflows ./.github/pattern.json ./Tools/Python ./Tools/sysbench_script.sh"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load configuration from JSON
        run: |
          CONFIG_FILE=".github/pattern.json"
          TEST_TYPE="${{ matrix.test-type }}"
          DIRS=$(jq -r --arg test "$TEST_TYPE" '.[$test].dirs[]' "$CONFIG_FILE" | sed 's/:.*$//' | paste -sd " ")                  
          DIRS_STRING=$(jq -r --arg test "$TEST_TYPE" '.[$test].dirs[]' "$CONFIG_FILE" | paste -sd " ")
          VAR=$(jq -c --arg test "$TEST_TYPE" '.[$test].var // {}' "$CONFIG_FILE")      
          
          if [[ $(jq -r --arg test "$TEST_TYPE" '.[$test].dirs[0]' "$CONFIG_FILE") =~ /Projects\/(.*)\/Scripts/ ]]; then
            OUTPUT_DIR="Output/${BASH_REMATCH[1]}/${TEST_TYPE}"
          fi
          
          echo "dirs=$DIRS" >> $GITHUB_ENV
          echo "dirs_string=$DIRS_STRING" >> $GITHUB_ENV
          echo "var=$VAR" >> $GITHUB_ENV
          echo "output_dir=$OUTPUT_DIR" >> $GITHUB_ENV

      - name: Calculate hash of directories
        run: |
          HASH=$(find ${{ env.dirs }} -type f -print0 | sort -z | xargs -0 sha256sum | sha256sum | awk '{print $1}')          
          echo "hash=$HASH" >> $GITHUB_ENV
          
          LAST_COMMIT=$(git rev-parse HEAD || git rev-parse origin/main)          
          GENERAL_HASH=$(git ls-tree -r $LAST_COMMIT -- $GENERAL_PATHS | awk '{print $3}' | xargs -I {} git show {} | sha256sum | awk '{print $1}')
          echo "general_hash=$GENERAL_HASH" >> $GITHUB_ENV

      - name: Check for and download existing artifact
        run: |
          ARTIFACT_NAME="${{ matrix.test-type }}-${{ env.hash }}-${{ env.general_hash }}"
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_ENV

          EXISTING=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | \
            jq -r --arg name "$ARTIFACT_NAME" '.artifacts[] | select(.name == $name).id')

          if [[ $EXISTING ]]; then
            echo "Artifact $ARTIFACT_NAME found. Downloading..." && echo "should_run=false" >> $GITHUB_ENV

            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$EXISTING/zip" \
              -o artifact.zip && \
              mkdir -p ${{ env.output_dir }} && \
              unzip -q artifact.zip -d ${{ env.output_dir }} && \
              rm artifact.zip
          else
            echo "Artifact $ARTIFACT_NAME not found. Running new benchmark." && echo "should_run=true" >> $GITHUB_ENV
          fi

      - name: Cache sysbench (apt)
        if: env.should_run == 'true'
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-sysbench-cache

      - name: Cache pip dependencies
        if: env.should_run == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        if: env.should_run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y sysbench
          python -m pip install --upgrade pip
          pip install pandas matplotlib

      - name: Start MySQL container
        if: env.should_run == 'true'
        run: |
          docker run --name mysql-${{ matrix.test-type }} -d \
            -e MYSQL_ROOT_PASSWORD=$DB_PASS \
            -e MYSQL_DATABASE=$DB_NAME \
            -p $DB_PORT:3306 mysql:8.0
          
          echo "Waiting for MySQL..."
          until docker exec mysql-${{ matrix.test-type }} mysqladmin --user=root --password=$DB_PASS --host=127.0.0.1 --port=$DB_PORT ping --silent; do sleep 1; done
          echo "MySQL is ready!"

      - name: Run sysbench script
        if: env.should_run == 'true'
        run: |
          chmod +x Tools/sysbench_script.sh
          
          Tools/sysbench_script.sh \
            -out "${{ env.output_dir }}" \
            -var '${{ env.var }}' \
            -scripts:$(echo "${{ env.dirs_string }}" | sed 's/ / /g')

      - name: Stop MySQL container
        if: env.should_run == 'true'
        run: |
          docker stop mysql-${{ matrix.test-type }}
          docker rm mysql-${{ matrix.test-type }}

      - name: Upload individual outputs
        if: env.should_run == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.output_dir }}

      - name: Upload combined outputs as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: combined-output
          path: Output